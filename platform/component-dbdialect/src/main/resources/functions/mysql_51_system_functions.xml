<?xml version="1.0" encoding="UTF-8"?>
<functions>
    <!--    control flow functions-->
    <function>
        <syntax>
            CASE value WHEN [compare_value] THEN result [WHEN [compare_value] THEN
            result ...] [ELSE result] END
        </syntax>
        <name>CASE</name>
        <args>
        </args>
        <description>
            Returns the result where value=compare_value.
            If there was no matching result value, the result after
            ELSE is returned, or NULL if there is no ELSE part.
        </description>
        <examples>
            <example>
                SELECT CASE 1 WHEN 1 THEN 'one' WHEN 2 THEN 'two' ELSE 'more' END;
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            CASE WHEN [condition] THEN result [WHEN [condition] THEN result ...] [ELSE
            result] END
        </syntax>
        <name>CASE</name>
        <args>
        </args>
        <description>
            Returns the result for the first condition that is true. 
            If there was no matching result value, the result after
            ELSE is returned, or NULL if there is no ELSE part.
        </description>
        <examples>
            <example>
                SELECT CASE WHEN 1>0 THEN 'true' ELSE 'false' END;
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            IF(expr1,expr2,expr3)
        </syntax>
        <name>IF</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">STRING</arg>      
            <arg optional="false">STRING</arg>
        </args>
        <description>
            If expr1 is TRUE (expr1 <> 0 and expr1 <> NULL) then IF() returns expr2; otherwise
            it returns expr3. IF() returns a numeric or string value, depending on the context in which it
            is used.
        </description>
        <examples>
            <example>
                SELECT IF(1 > 2, 1, 2);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            IFNULL(expr1,expr2)
        </syntax>
        <name>IFNULL</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            If expr1 is not NULL, IFNULL() returns expr1; otherwise it returns expr2.
            IFNULL() returns a numeric or string value, depending on the context in which it is used.
        </description>
        <examples>
            <example>
                SELECT IF(1 > 2, 1);
                SELECT IFNULL(1/0,'yes');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            NULLIF(expr1,expr2)
        </syntax>
        <name>NULLIF</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns NULL if expr1 = expr2 is true, otherwise returns expr1. This is the same as CASE WHEN
            expr1 = expr2 THEN NULL ELSE expr1 END.
        </description>
        <examples>
            <example>
                SELECT NULLIF(1,1);
            </example>
        </examples>
    </function>
    <!--    String functions-->
    <function>
        <syntax>
            ASCII(str)
        </syntax>
        <name>ASCII</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the numeric value of the leftmost character of the string str. Returns 0 if str is the empty
            string. Returns NULL if str is NULL. ASCII() works for 8-bit characters.
        </description>
        <examples>
            <example>
                SELECT ASCII('LAO ZHU');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            BIN(N)
        </syntax>
        <name>BIN</name>
        <args>
            <arg optional="false">BIGINT</arg>
        </args>
        <description>
            Returns a string representation of the binary value of N, where N is a longlong (BIGINT) number.
            This is equivalent to CONV(N,10,2). Returns NULL if N is NULL
        </description>
        <examples>
            <example>
                SELECT BIN(22);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            BIT_LENGTH(str)
        </syntax>
        <name>BIT_LENGTH</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the length of the string str in bits.
        </description>
        <examples>
            <example>
                SELECT BIT_LENGTH('LAO ZHU');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            CHAR(N,... [USING charset_name])
        </syntax>
        <name>CHAR</name>
        <args>
            <arg optional="false">NUMBER</arg>
        </args>
        <description>
            CHAR() interprets each argument N as an integer and returns a string consisting of the
            characters given by the code values of those integers. NULL values are skipped.
        </description>
        <examples>
            <example>
                SELECT CHAR(77,121,83,81,'76');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            CHAR_LENGTH(str)
        </syntax>
        <name>CHAR_LENGTH</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the length of the string str, measured in characters. A multi-byte character counts as a
            single character. This means that for a string containing five 2-byte characters, LENGTH()
            returns 10, whereas CHAR_LENGTH() returns 5.CHARACTER_LENGTH(str)/CHARACTER_LENGTH() is a synonym for CHAR_LENGTH().
        </description>
        <examples>
            <example>
                SELECT CHAR_LENGTH('LAO ZHU')
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            CONCAT(str1,str2,...)
        </syntax>
        <name>CONCAT</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="true">STRING</arg>
        </args>
        <description>
            Returns the string that results from concatenating the arguments. May have one or more arguments.
            If all arguments are nonbinary strings, the result is a nonbinary string. If the arguments include any
            binary strings, the result is a binary string. A numeric argument is converted to its equivalent binary
            string form; if you want to avoid that, you can use an explicit type cast.
        </description>
        <examples>
            <example>
                SELECT CONCAT('My', 'LAO ', 'ZHU');
                SELECT CONCAT('My', 'LAO ', 'ZHU', 520);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            CONCAT_WS(separator,str1,str2,...)
        </syntax>
        <name>CONCAT_WS</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">STRING</arg>
            <arg optional="true">STRING</arg>
        </args>
        <description>
            CONCAT_WS() stands for Concatenate With Separator and is a special form of
            CONCAT(). The first argument is the separator for the rest of the arguments. The separator is
            added between the strings to be concatenated. The separator can be a string, as can the rest of the
            arguments. If the separator is NULL, the result is NULL.
        </description>
        <examples>
            <example>
                SELECT CONCAT_WS(' ', 'LAO ', 'ZHU');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            ELT(N,str1,str2,str3,...)
        </syntax>
        <name>ELT</name>
        <args>
            <arg optional="false">NUMBER</arg>
            <arg optional="false">STRING</arg>
            <arg optional="true">STRING</arg>
        </args>
        <description>
            ELT() returns the Nth element of the list of strings: str1 if N = 1, str2 if N = 2, and so on.
            Returns NULL if N is less than 1 or greater than the number of arguments. ELT() is the
            complement of FIELD().
        </description>
        <examples>
            <example>
                SELECT ELT(2, 'My', 'LAO ZHU', 'QL');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            EXPORT_SET(bits,on,off[,separator[,number_of_bits]])
        </syntax>
        <name>EXPORT_SET</name>
        <args>
            <arg optional="false">NUMBER</arg>
            <arg optional="false">STRING</arg>
            <arg optional="true">STRING</arg>
        </args>
        <description>
            Returns a string such that for every bit set in the value bits, you get an on string and for every
            bit not set in the value, you get an off string. Bits in bits are examined from right to left (from
            low-order to high-order bits). Strings are added to the result from left to right, separated by the
            separator string (the default being the comma character “,”). The number of bits examined is
            given by number_of_bits, which has a default of 64 if not specified. number_of_bits is silently
            clipped to 64 if larger than 64. It is treated as an unsigned integer, so a value of –1 is effectively the
            same as 64.
        </description>
        <examples>
            <example>
                SELECT EXPORT_SET(5,'Y','N',',',4);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            FIELD(str,str1,str2,str3,...)
        </syntax>
        <name>FIELD</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">STRING</arg>
            <arg optional="true">STRING</arg>
        </args>
        <description>
            Returns the index (position) of str in the str1, str2, str3, ... list. Returns 0 if str is not found.
            If all arguments to FIELD() are strings, all arguments are compared as strings. If all
            arguments are numbers, they are compared as numbers. Otherwise, the arguments are compared
            as double.
            If str is NULL, the return value is 0 because NULL fails equality comparison with any value.
            FIELD() is the complement of ELT().
        </description>
        <examples>
            <example>
                SELECT FIELD('LAO ZHU','N','LAOZHU','y');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            FIND_IN_SET(str,strlist)
        </syntax>
        <name>FIND_IN_SET</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">STRINGLIST</arg>
        </args>
        <description>
            Returns a value in the range of 1 to N if the string str is in the string list strlist consisting of N
            substrings. A string list is a string composed of substrings separated by “,” characters. If the first
            argument is a constant string and the second is a column of type SET, the FIND_IN_SET()
            function is optimized to use bit arithmetic. Returns 0 if str is not in strlist or if strlist is the
            empty string. Returns NULL if either argument is NULL. This function does not work properly if the
            first argument contains a comma (“,”) character.
        </description>
        <examples>
            <example>
                SELECT FIND_IN_SET('LAO ZHU','LAO ZHU,Y,y');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            FORMAT(X,D)
        </syntax>
        <name>FORMAT</name>
        <args>
            <arg optional="false">NUMBER</arg>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Formats the number X to a format like '#,###,###.##', rounded to D decimal places, and returns
            the result as a string. If D is 0, the result has no decimal point or fractional part.
        </description>
        <examples>
            <example>
                SELECT FORMAT(20.55, 0);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            HEX(str), HEX(N)
        </syntax>
        <name>HEX</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            For a string argument str, HEX() returns a hexadecimal string representation of str
            where each character in str is converted to two hexadecimal digits. The inverse of this operation is
            performed by the UNHEX() function.
            For a numeric argument N, HEX() returns a hexadecimal string representation of the value
            of N treated as a longlong (BIGINT) number. This is equivalent to CONV(N,10,16). The
            inverse of this operation is performed by CONV(HEX(N),16,10).
        </description>
        <examples>
            <example>
                SELECT HEX('LAO ZHU');
                SELECT HEX(222);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            INSERT(str,pos,len,newstr)
        </syntax>
        <name>INSERT</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">NUMBER</arg>
            <arg optional="false">NUMBER</arg>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the string str, with the substring beginning at position pos and len characters long
            replaced by the string newstr. Returns the original string if pos is not within the length of the string.
            Replaces the rest of the string from position pos if len is not within the length of the rest of the
            string. Returns NULL if any argument is NULL.
        </description>
        <examples>
            <example>
                SELECT INSERT('LAO ZHU', 4, 1, '');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            INSTR(str,substr)
        </syntax>
        <name>INSTR</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the position of the first occurrence of substring substr in string str. This is the same as
            the two-argument form of LOCATE(), except that the order of the arguments is reversed.
        </description>
        <examples>
            <example>
                SELECT INSTR('LAO ZHU', 'ZHU');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            LOWER(str)
        </syntax>
        <name>LOWER</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the string str with all characters changed to lowercase according to the current character
            set mapping. The default is latin1 (cp1252 West European).LCASE(str)/LCASE() is a synonym for LOWER().
        </description>
        <examples>
            <example>
                SELECT LOWER('LAO ZHU');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            LEFT(str,len)
        </syntax>
        <name>LEFT</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">NUMBER</arg>
        </args>
        <description>
            Returns the leftmost len characters from the string str, or NULL if any argument is NULL.
        </description>
        <examples>
            <example>
                SELECT LEFT('LAO ZHU', 1);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            LENGTH(str)
        </syntax>
        <name>LENGTH</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the length of the string str, measured in bytes. A multi-byte character counts as multiple
            bytes. This means that for a string containing five 2-byte characters, LENGTH() returns 10,
            whereas CHAR_LENGTH() returns 5.
            OCTET_LENGTH(str) is a synonym for LENGTH().
        </description>
        <examples>
            <example>
                SELECT LENGTH('LAO ZHU');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            LOAD_FILE(file_name)
        </syntax>
        <name>LOAD_FILE</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Reads the file and returns the file contents as a string. To use this function, the file must be located
            on the server host, you must specify the full path name to the file, and you must have the FILE 
            privilege. The file must be readable by all and its size less than max_allowed_packet bytes.
            If the secure_file_priv system variable is set to a nonempty directory name, the file to be
            loaded must be located in that directory.
            If the file does not exist or cannot be read because one of the preceding conditions is not satisfied,
            the function returns NULL.
            As of MySQL 5.1.6, the character_set_filesystem system variable controls interpretation
            of file names that are given as literal strings.
        </description>
        <examples>
            <example>
                UPDATE t
                SET blob_col=LOAD_FILE('/tmp/picture')
                WHERE id=1;
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            LOCATE(substr,str), LOCATE(substr,str,pos)
        </syntax>
        <name>LOCATE</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">STRING</arg>
            <arg optional="false">NUMBER</arg>
        </args>
        <description>
            The first syntax returns the position of the first occurrence of substring substr in string str. The
            second syntax returns the position of the first occurrence of substring substr in string str, starting
            at position pos. Returns 0 if substr is not in str.
            POSITION(substr IN str) is a synonym for LOCATE(substr,str).
        </description>
        <examples>
            <example>
                SELECT LOCATE('bar', 'foobarbar');
            </example>
            <example>
                SELECT LOCATE('xbar', 'foobarbar');
            </example>
            <example>
                SELECT LOCATE('bar', 'foobarbar', 5);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            LPAD(str,len,padstr)
        </syntax>
        <name>LPAD</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">NUMBER</arg>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the string str, left-padded with the string padstr to a length of len characters. If str is
            longer than len, the return value is shortened to len characters.
        </description>
        <examples>
            <example>
                SELECT LPAD('hi',4,'??');
            </example>
            <example>
                SELECT LPAD('hi',1,'??');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            LTRIM(str)
        </syntax>
        <name>LTRIM</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the string str with leading space characters removed.
        </description>
        <examples>
            <example>
                SELECT LTRIM('  hi');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            MAKE_SET(bits,str1,str2,...)
        </syntax>
        <name>MAKE_SET</name>
        <args>
            <arg optional="false">BITS</arg>
            <arg optional="false">STRING</arg>
            <arg optional="true">STRING</arg>
        </args>
        <description>
            Returns a set value (a string containing substrings separated by “,” characters) consisting of the
            strings that have the corresponding bit in bits set. str1 corresponds to bit 0, str2 to bit 1, and so
            on. NULL values in str1, str2, ... are not appended to the result.
        </description>
        <examples>
            <example>
                SELECT MAKE_SET(1,'a','b','c');
            </example>
            <example>
                SELECT MAKE_SET(1 | 4,'hello','nice','lao zhu');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            SUBSTRING(str,pos), 
            SUBSTRING(str FROM pos),
            SUBSTRING(str,pos,len), 
            SUBSTRING(str FROM pos FOR len),
            SUBSTR(str,pos), 
            SUBSTR(str FROM pos), 
            SUBSTR(str,pos,len),
            SUBSTR(str FROM pos FOR len)
        </syntax>
        <name>SUBSTRING</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="true">NUMBER</arg>
            <arg optional="true">NUMBER</arg>
        </args>
        <description>
            The forms without a len argument return a substring from string str starting at position pos.
            The forms with a len argument return a substring len characters long from string str, starting at
            position pos. The forms that use FROM are standard SQL syntax. It is also possible to use a negative
            value for pos. In this case, the beginning of the substring is pos characters from the end of the
            string, rather than the beginning. A negative value may be used for pos in any of the forms of this
            function.
            For all forms of SUBSTRING(), the position of the first character in the string from which the
            substring is to be extracted is reckoned as 1.
            MID(str,pos,len) is a synonym for SUBSTRING(str,pos,len).
        </description>
        <examples>
            <example>
                SELECT SUBSTRING('lao zhu',5,3);
            </example>
            <example>
                SELECT MID('lao zhu',5,3);
            </example>
            <example>
                SELECT MID('lao zhu' from 5 for 3);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            OCT(N)
        </syntax>
        <name>OCT</name>
        <args>
            <arg optional="false">NUMBER</arg>
        </args>
        <description>
            Returns a string representation of the octal value of N, where N is a longlong (BIGINT) number. This
            is equivalent to CONV(N,10,8). Returns NULL if N is NULL.
        </description>
        <examples>
            <example>
                SELECT OCT(12);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            ORD(str)
        </syntax>
        <name>ORD</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            If the leftmost character of the string str is a multi-byte character, returns the code for that
            character, calculated from the numeric values of its constituent bytes using this formula:
            (1st byte code)
            + (2nd byte code * 256)
            + (3rd byte code * 2562) ...
            If the leftmost character is not a multi-byte character, ORD() [996] returns the same value as the
            ASCII() function.
        </description>
        <examples>
            <example>
                SELECT ORD('老猪');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            QUOTE(str)
        </syntax>
        <name>QUOTE</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Quotes a string to produce a result that can be used as a properly escaped data value in an SQL
            statement. The string is returned enclosed by single quotation marks and with each instance of
            backslash (“\”), single quote (“'”), ASCII NUL, and Control+Z preceded by a backslash. If the
            argument is NULL, the return value is the word “NULL” without enclosing single quotation marks.
        </description>
        <examples>
            <example>
                SELECT QUOTE('lao zhu\'');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            REPEAT(str,count)
        </syntax>
        <name>REPEAT</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">NUMBER</arg>
        </args>
        <description>
            Returns a string consisting of the string str repeated count times. If count is less than 1, returns
            an empty string. Returns NULL if str or count are NULL.
        </description>
        <examples>
            <example>
                SELECT REPEAT('lao zhu\'', 2);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            REPLACE(str,from_str,to_str)
        </syntax>
        <name>REPLACE</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">STRING</arg>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the string str with all occurrences of the string from_str replaced by the string to_str.
            REPLACE() performs a case-sensitive match when searching for from_str.
        </description>
        <examples>
            <example>
                SELECT REPLACE('lao zhu', 'l', 'L');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            REVERSE(str)
        </syntax>
        <name>REVERSE</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the string str with the order of the characters reversed.
        </description>
        <examples>
            <example>
                SELECT REVERSE('lao zhu');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            RIGHT(str,len)
        </syntax>
        <name>RIGHT</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">NUMBER</arg>
        </args>
        <description>
            Returns the rightmost len characters from the string str, or NULL if any argument is NULL.
        </description>
        <examples>
            <example>
                SELECT RIGHT('lao zhu', 3);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            RPAD(str,len,padstr)
        </syntax>
        <name>RPAD</name>
        <args>
            <arg optional="false">STRING</arg>
            <arg optional="false">NUMBER</arg>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the string str, right-padded with the string padstr to a length of len characters. If str is
            longer than len, the return value is shortened to len characters.
        </description>
        <examples>
            <example>
                SELECT RPAD('lao zhu', 9, 's');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            RTRIM(str)
        </syntax>
        <name>RTRIM</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns the string str with trailing space characters removed.
        </description>
        <examples>
            <example>
                SELECT RTRIM('lao zhu   ');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            SOUNDEX(str)
        </syntax>
        <name>SOUNDEX</name>
        <args>
            <arg optional="false">STRING</arg>
        </args>
        <description>
            Returns a soundex string from str. Two strings that sound almost the same should have identical
            soundex strings. A standard soundex string is four characters long, but the SOUNDEX()
            function returns an arbitrarily long string. You can use SUBSTRING() on the result to get a
            standard soundex string. All nonalphabetic characters in strare ignored. All international alphabetic
            characters outside the A-Z range are treated as vowels.
            When using SOUNDEX(), you should be aware of the following limitations:
            • This function, as currently implemented, is intended to work well with strings that are in the English
                language only. Strings in other languages may not produce reliable results.
            • This function is not guaranteed to provide consistent results with strings that use multi-byte
                character sets, including utf-8.
            
            expr1 SOUNDS LIKE expr2 is the same as SOUNDEX(expr1) = SOUNDEX(expr2).
        </description>
        <examples>
            <example>
                SELECT SOUNDEX('lao zhu');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            SPACE(N)
        </syntax>
        <name>SPACE</name>
        <args>
            <arg optional="false">NUMBER</arg>
        </args>
        <description>
            Returns a string consisting of N space characters.
        </description>
        <examples>
            <example>
                SELECT CONCAT(SPACE(10),'lao zhu');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            SUBSTRING_INDEX(str,delim,count)
        </syntax>
        <name>SUBSTRING_INDEX</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
            <arg optional="false">NUMBER</arg>
        </args>
        <description>
            Returns the substring from string strbefore countoccurrences of the delimiter delim. If count
            is positive, everything to the left of the final delimiter (counting from the left) is returned. If count
            is negative, everything to the right of the final delimiter (counting from the right) is returned.
            SUBSTRING_INDEX() performs a case-sensitive match when searching for delim.
        </description>
        <examples>
            <example>
                SELECT SUBSTRING_INDEX('lao zhu a',' ',2);
            </example>
            <example>
                SELECT SUBSTRING_INDEX('lao zhu a',' ',-2);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), 
            TRIM([remstr FROM] str)
        </syntax>
        <name>TRIM</name>
        <args>
            <arg optional="true">String</arg>
            <arg optional="true">String</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            Returns the string str with all remstr prefixes or suffixes removed. If none of the specifiers BOTH,
            LEADING, or TRAILING is given, BOTH is assumed. remstris optional and, if not specified, spaces
            are removed.
        </description>
        <examples>
            <example>
                SELECT TRIM(BOTH '.' FROM '.lao zhu.');
            </example>
            <example>
                SELECT TRIM('.' FROM ' lao zhu.');
            </example>
            <example>
                SELECT TRIM(' lao zhu ');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            UPPER(str),
            UCASE(str)
        </syntax>
        <name>UPPER</name>
        <args>
            <arg optional="false">String</arg>
        </args>
        <description>
            Returns the string str with all characters changed to uppercase according to the current character
            set mapping. The default is latin1(cp1252 West European).
        </description>
        <examples>
            <example>
                SELECT UPPER('.lao zhu.');
            </example>
            <example>
                SELECT UCASE(' lao zhu.');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            UNHEX(str)
        </syntax>
        <name>UNHEX</name>
        <args>
            <arg optional="false">String</arg>
        </args>
        <description>
            For a string argument str, UNHEX(str) performs the inverse operation of
            HEX(str). That is, it interprets each pair of characters in the argument as a hexadecimal
            number and converts it to the character represented by the number. The return value is a binary
            string.
        </description>
        <examples>
            <example>
                SELECT UNHEX('6C616F207A6875');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            expr LIKE pat [ESCAPE 'escape_char']
        </syntax>
        <name>LIKE</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
            <arg optional="true">String</arg>
        </args>
        <description>
            Pattern matching using SQL simple regular expression comparison. Returns 1(TRUE) or 0(FALSE).
            If either expror patis NULL, the result is NULL.
            The pattern need not be a literal string. For example, it can be specified as a string expression or
            table column.
            Per the SQL standard, LIKE performs matching on a per-character basis, thus it can produce
            results different from the = comparison operator.
            With LIKE you can use the following two wildcard characters in the pattern.
                %     Matches any number of characters, even zero characters
                _     Matches exactly one character
            To test for literal instances of a wildcard character, precede it by the escape character. If you do not
            specify the ESCAPEcharacter, “\”is assumed.
        </description>
        <examples>
            <example>
                SELECT 'lao zhu' LIKE '%zhu%';
            </example>
            <example>
                SELECT 'laozhu!' LIKE 'laozhu_';
            </example>
            <example>
                SELECT '%laozhu' LIKE '\%laozhu%';
            </example>
            <example>
                SELECT 'laozhu_' LIKE 'laozhu|_' ESCAPE '|';
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            expr NOT LIKE pat [ESCAPE 'escape_char']
        </syntax>
        <name>NOT LIKE</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
            <arg optional="true">String</arg>
        </args>
        <description>
            This is the same as NOT (expr LIKE pat [ESCAPE 'escape_char']).
        </description>
        <examples>
            <example>
                SELECT 'lao zhu' NOT LIKE '%zhu%';
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            STRCMP(expr1,expr2)
        </syntax>
        <name>STRCMP</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            STRCMP()returns 0 if the strings are the same, -1 if the first argument is smaller than the
            second according to the current sort order, and 1 otherwise.
        </description>
        <examples>
            <example>
                SELECT STRCMP('lao zhu', 'zhu');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            expr REGEXP pat, 
            expr RLIKE pat
        </syntax>
        <name>REGEXP</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            Performs a pattern match of a string expression expragainst a pattern pat. The pattern can be
            an extended regular expression. The syntax for regular expressions is discussed in Section 12.5.2,
            “Regular Expressions”. Returns 1if exprmatches pat; otherwise it returns 0. If either expror
            patis NULL, the result is NULL. RLIKE is a synonym for REGEXP, provided for mSQL
            compatibility.
            The pattern need not be a literal string. For example, it can be specified as a string expression or
            table column.
        </description>
        <examples>
            <example>
                SELECT 'laozhu' REGEXP '^[h-m]';
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            expr NOT REGEXP pat, 
            expr NOT RLIKE pat
        </syntax>
        <name>NOT REGEXP</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            This is the same as NOT (expr REGEXP pat).
        </description>
        <examples>
            <example>
                SELECT 'laozhu' NOT REGEXP '^[h-k]';
            </example>
        </examples>
    </function>
    <!--    Numric Functions   -->
    <function>
        <syntax>
            ABS(X)
        </syntax>
        <name>ABS</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the absolute value of X.
        </description>
        <examples>
            <example>
                SELECT ABS(-2);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            ACOS(X)
        </syntax>
        <name>ACOS</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the arc cosine of X, that is, the value whose cosine is X. Returns NULL 
            if X is not in the range -1 to 1.
        </description>
        <examples>
            <example>
                SELECT ACOS(-0.6);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            ASIN(X)
        </syntax>
        <name>ASIN</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the arc sine of X, that is, the value whose sine is X. Returns NULL if Xis not in the range -1
            to 1.
        </description>
        <examples>
            <example>
                SELECT ASIN(0.6);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            ATAN(X)
        </syntax>
        <name>ATAN</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the arc tangent of X, that is, the value whose tangent is X.
        </description>
        <examples>
            <example>
                SELECT ATAN(0.6);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            ATAN(Y,X), 
            ATAN2(Y,X)
        </syntax>
        <name>ATAN</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the arc tangent of the two variables Xand Y. It is similar to calculating the arc tangent of Y/
            X, except that the signs of both arguments are used to determine the quadrant of the result.
        </description>
        <examples>
            <example>
                SELECT ATAN(2, 4);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            CEILING(X), 
            CEIL(X)
        </syntax>
        <name>CEILING</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the smallest integer value not less than X.
        </description>
        <examples>
            <example>
                SELECT CEILING(2.45);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            CONV(N,from_base,to_base)
        </syntax>
        <name>CONV</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Converts numbers between different number bases. Returns a string representation of the number
             N, converted from base from_baseto base to_base. Returns NULL if any argument is NULL. The
            argument Nis interpreted as an integer, but may be specified as an integer or a string. The minimum
            base is 2and the maximum base is 36. If to_baseis a negative number, N is regarded as a signed
            number. Otherwise, Nis treated as unsigned. CONV() works with 64-bit precision.
        </description>
        <examples>
            <example>
                SELECT CONV('a',16,2);
            </example>
            <example>
                SELECT CONV('f',16,10);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            COS(X)
        </syntax>
        <name>COS</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the cosine of X, where X is given in radians.
        </description>
        <examples>
            <example>
                SELECT COS(0.5);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            COT(X)
        </syntax>
        <name>COT</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the cotangent of X.
        </description>
        <examples>
            <example>
                SELECT COT(0.5);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            CRC32(expr)
        </syntax>
        <name>CRC32</name>
        <args>
            <arg optional="false">String</arg>
        </args>
        <description>
            Computes a cyclic redundancy check value and returns a 32-bit unsigned value. The result is NULL if
            the argument is NULL. The argument is expected to be a string and (if possible) is treated as one if it
            is not.
        </description>
        <examples>
            <example>
                SELECT CRC32('LAO ZHU');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            DEGREES(X)
        </syntax>
        <name>DEGREES</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the argument X, converted from radians to degrees.
        </description>
        <examples>
            <example>
                SELECT DEGREES(PI());
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            EXP(X)
        </syntax>
        <name>EXP</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the value of e(the base of natural logarithms) raised to the power of X. The inverse of this
            function is LOG()(using a single argument only) or LN().
        </description>
        <examples>
            <example>
                SELECT EXP(1);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
            FLOOR(X)
        </syntax>
        <name>FLOOR</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the largest integer value not greater than X.
        </description>
        <examples>
            <example>
                SELECT FLOOR(1.6);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             LN(X)
        </syntax>
        <name>LN</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the natural logarithm of X; that is, the base-elogarithm of X. If X is less than or equal to 0,
            then NULLis returned.
        </description>
        <examples>
            <example>
                SELECT LN(1.6);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             LOG(X),
             LOG(B,X)
        </syntax>
        <name>LOG</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            If called with one parameter, this function returns the natural logarithm of X. If Xis less than or equal
            to 0, then NULLis returned.
            The inverse of this function (when called with a single argument) is the EXP() function.
        </description>
        <examples>
            <example>
                SELECT LOG(10);
            </example>
            <example>
                SELECT LOG(2, 4);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             LOG2(X)
        </syntax>
        <name>LOG2</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the base-2 logarithm of X.
        </description>
        <examples>
            <example>
                SELECT LOG2(10);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             LOG10(X)
        </syntax>
        <name>LOG10</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the base-10 logarithm of X.
        </description>
        <examples>
            <example>
                SELECT LOG10(10);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             MOD(N,M), 
             N % M, 
             N MOD M
        </syntax>
        <name>MOD</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Modulo operation. Returns the remainder of N divided by M.
        </description>
        <examples>
            <example>
                SELECT MOD(2, 3);
            </example>
            <example>
                SELECT 2 MOD 3;
            </example>
            <example>
                SELECT 2 % 3;
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             PI()
        </syntax>
        <name>PI</name>
        <args>
        </args>
        <description>
            Returns the value of π(pi). The default number of decimal places displayed is seven, but MySQL
            uses the full double-precision value internally.
        </description>
        <examples>
            <example>
                SELECT PI();
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             POW(X,Y),
             POWER(X,Y)
        </syntax>
        <name>POW</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the value of Xraised to the power of Y.
        </description>
        <examples>
            <example>
                SELECT POW(2, 3);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             RADIANS(X)
        </syntax>
        <name>RADIANS</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the argument X, converted from degrees to radians. (Note that πradians equals 180
            degrees.)
        </description>
        <examples>
            <example>
                SELECT RADIANS(45);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             RAND(), 
             RAND(N)
        </syntax>
        <name>RAND</name>
        <args>
            <arg optional="true">Number</arg>
        </args>
        <description>
            Returns a random floating-point value vin the range 0<= v< 1.0. If a constant integer argument N
            is specified, it is used as the seed value, which produces a repeatable sequence of column values.
            In the following example, note that the sequences of values produced by RAND(3)is the same both
            places where it occurs.
        </description>
        <examples>
            <example>
                SELECT RAND();
            </example>
            <example>
                SELECT RAND(1);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             ROUND(X),
             ROUND(X,D)
        </syntax>
        <name>ROUND</name>
        <args>
            <arg optional="true">Number</arg>
        </args>
        <description>
            Rounds the argument Xto Ddecimal places. The rounding algorithm depends on the data type of
            X. D defaults to 0 if not specified. D can be negative to cause D digits left of the decimal point of the
            value Xto become zero.
        </description>
        <examples>
            <example>
                SELECT ROUND(1.35);
            </example>
            <example>
                SELECT ROUND(21.35, -1);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             SIGN(X)
        </syntax>
        <name>SIGN</name>
        <args>
            <arg optional="true">Number</arg>
        </args>
        <description>
            Returns the sign of the argument as -1, 0, or 1, depending on whether X is negative, zero, or
            positive.
        </description>
        <examples>
            <example>
                SELECT SIGN(-1.35);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             SIN(X)
        </syntax>
        <name>SIN</name>
        <args>
            <arg optional="true">Number</arg>
        </args>
        <description>
            Returns the sine of X, where X is given in radians.
        </description>
        <examples>
            <example>
                SELECT SIN(1);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             SQRT(X)
        </syntax>
        <name>SQRT</name>
        <args>
            <arg optional="true">Number</arg>
        </args>
        <description>
            Returns the square root of a nonnegative number X.
        </description>
        <examples>
            <example>
                SELECT SQRT(4);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             TAN(X)
        </syntax>
        <name>TAN</name>
        <args>
            <arg optional="true">Number</arg>
        </args>
        <description>
            Returns the tangent of X, where Xis given in radians.
        </description>
        <examples>
            <example>
                SELECT TAN(PI() / 4);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             TRUNCATE(X,D)
        </syntax>
        <name>TRUNCATE</name>
        <args>
            <arg optional="true">Number</arg>
            <arg optional="true">Number</arg>
        </args>
        <description>
            Returns the number X, truncated to Ddecimal places. If Dis 0, the result has no decimal point or
            fractional part. Dcan be negative to cause Ddigits left of the decimal point of the value Xto become
            zero.
        </description>
        <examples>
            <example>
                SELECT TRUNCATE(PI() / 4, 2);
            </example>
        </examples>
    </function>
<!--    Date and Time Functions-->
    <function>
        <syntax>
             ADDDATE(date,INTERVAL expr unit),
             ADDDATE(expr,days)
        </syntax>
        <name>ADDDATE</name>
        <args>
            <arg optional="false">Date</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            When invoked with the INTERVALform of the second argument, ADDDATE() is a
            synonym for DATE_ADD(). The related function SUBDATE() is a synonym for
            DATE_SUB(). For information on the INTERVAL unit argument, see the discussion for
            DATE_ADD().
        </description>
        <examples>
            <example>
                SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
             ADDTIME(expr1,expr2)
        </syntax>
        <name>ADDTIME</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            ADDTIME() adds expr2 to expr1 and returns the result. expr1 is a time or datetime
            expression, and expr2 is a time expression.
        </description>
        <examples>
            <example>
                SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              CONVERT_TZ(dt,from_tz,to_tz)
        </syntax>
        <name>CONVERT_TZ</name>
        <args>
            <arg optional="false">DateTime</arg>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            CONVERT_TZ() converts a datetime value dtfrom the time zone given by from_tz to the
            time zone given by to_tzand returns the resulting value. This function returns NULL 
            if the arguments are invalid.
            If the value falls out of the supported range of the TIMESTAMP type when converted from from_tz
            to UTC, no conversion occurs.
        </description>
        <examples>
            <example>
                SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              CURDATE(),
              CURRENT_DATE,
              CURRENT_DATE()
        </syntax>
        <name>CURDATE</name>
        <args>
        </args>
        <description>
            Returns the current date as a value in 'YYYY-MM-DD'or YYYYMMDD format, depending on whether
            the function is used in a string or numeric context.
        </description>
        <examples>
            <example>
                SELECT CURDATE();
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              CURTIME(),
              CURRENT_TIME,
              CURRENT_TIME()
        </syntax>
        <name>CURTIME</name>
        <args>
        </args>
        <description>
            Returns the current time as a value in 'HH:MM:SS'or HHMMSS.uuuuuu format, depending on
            whether the function is used in a string or numeric context. The value is expressed in the current time
            zone.
        </description>
        <examples>
            <example>
                SELECT CURTIME();
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              NOW(),
              CURRENT_TIMESTAMP,
              CURRENT_TIMESTAMP(),
              LOCALTIME,
              LOCALTIME(),
              LOCALTIMESTAMP,
              LOCALTIMESTAMP()
        </syntax>
        <name>NOW</name>
        <args>
        </args>
        <description>
            Returns the current date and time as a value in 'YYYY-MM-DD HH:MM:SS'or
            YYYYMMDDHHMMSS.uuuuuu format, depending on whether the function is used in a string or numeric
            context. The value is expressed in the current time zone.
        </description>
        <examples>
            <example>
                SELECT NOW();
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              DATE(expr)
        </syntax>
        <name>DATE</name>
        <args>
            <arg optional="false">String</arg>
        </args>
        <description>
            Extracts the date part of the date or datetime expression expr.
        </description>
        <examples>
            <example>
                SELECT DATE('2013-08-09');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              DATEDIFF(expr1,expr2)
        </syntax>
        <name>DATEDIFF</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            DATEDIFF() returns expr1– expr2 expressed as a value in days from one date to the
            other. expr1and expr2are date or date-and-time expressions. Only the date parts of the values
            are used in the calculation.
        </description>
        <examples>
            <example>
                SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              DATE_ADD(date,INTERVAL expr unit), 
              DATE_SUB(date,INTERVAL expr unit)
        </syntax>
        <name>DATE_ADD</name>
        <args>
            <arg optional="false">Date</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            These functions perform date arithmetic. The dateargument specifies the starting date or datetime
            value. expris an expression specifying the interval value to be added or subtracted from the starting
            date. expris a string; it may start with a “-”for negative intervals. unitis a keyword indicating the
            units in which the expression should be interpreted.
            The INTERVAL keyword and the unit specifier are not case sensitive.
        </description>
        <examples>
            <example>
                SELECT DATE_ADD('2013-12-31 23:59:59', INTERVAL 1 SECOND);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              DATE_FORMAT(date,format)
        </syntax>
        <name>DATE_FORMAT</name>
        <args>
            <arg optional="false">Date</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            Formats the datevalue according to the formatstring.
        </description>
        <examples>
            <example>
                SELECT DATE_FORMAT('2013-10-04 22:23:00', '%W %M %Y');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              DAYOFMONTH(date), 
              DAY(date)
        </syntax>
        <name>DAYOFMONTH</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Returns the name of the weekday for date.
        </description>
        <examples>
            <example>
                SELECT DAYOFMONTH('2013-10-04 22:23:00');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              DAYNAME(date)
        </syntax>
        <name>DAYNAME</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Returns the name of the weekday for date.
        </description>
        <examples>
            <example>
                SELECT DAYNAME('2013-10-04 22:23:00');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              DAYOFWEEK(date)
        </syntax>
        <name>DAYOFWEEK</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Returns the weekday index for date(1= Sunday, 2= Monday, …, 7= Saturday). These index
            values correspond to the ODBC standard.
        </description>
        <examples>
            <example>
                SELECT DAYOFWEEK('2013-10-04 22:23:00');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              DAYOFYEAR(date)
        </syntax>
        <name>DAYOFYEAR</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Returns the day of the year for date, in the range 1to 366.
        </description>
        <examples>
            <example>
                SELECT DAYOFYEAR('2013-10-04 22:23:00');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              EXTRACT(unit FROM date)
        </syntax>
        <name>EXTRACT</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Date</arg>
        </args>
        <description>
            The EXTRACT() function uses the same kinds of unit specifiers as DATE_ADD() or
            DATE_SUB(), but extracts parts from the date rather than performing date arithmetic.
        </description>
        <examples>
            <example>
                SELECT EXTRACT(YEAR FROM '2009-07-02');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              FROM_DAYS(N)
        </syntax>
        <name>FROM_DAYS</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Given a day number N, returns a DATE value.
        </description>
        <examples>
            <example>
                SELECT FROM_DAYS(200);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              FROM_UNIXTIME(unix_timestamp),
              FROM_UNIXTIME(unix_timestamp,format)
        </syntax>
        <name>FROM_UNIXTIME</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            Returns a representation of the unix_timestampargument as a value in 'YYYY-MM-DD
            HH:MM:SS'or YYYYMMDDHHMMSS.uuuuuu format, depending on whether the function is used in a
            string or numeric context. The value is expressed in the current time zone. unix_timestampis an
            internal timestamp value such as is produced by the UNIX_TIMESTAMP() function.
            If formatis given, the result is formatted according to the formatstring, which is used the same
            way as listed in the entry for the DATE_FORMAT() function.
        </description>
        <examples>
            <example>
                SELECT FROM_UNIXTIME(1196440219);
            </example>
            <example>
                SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(),'%Y %D %M %h:%i:%s %x');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              GET_FORMAT({DATE|TIME|DATETIME}, {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})
        </syntax>
        <name>GET_FORMAT</name>
        <args>
            <arg optional="false">Date</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            Returns a format string. This function is useful in combination with the DATE_FORMAT() and
            the STR_TO_DATE() functions.
            The possible values for the first and second arguments result in several possible format strings (for
            the specifiers used, see the table in the DATE_FORMAT() function description). ISO format
            refers to ISO 9075, not ISO 8601.
        </description>
        <examples>
            <example>
                SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              HOUR(time)
        </syntax>
        <name>HOUR</name>
        <args>
            <arg optional="false">Time</arg>
        </args>
        <description>
            Returns the hour for time. The range of the return value is 0 to 23 for time-of-day values. However,
            the range of TIME values actually is much larger, so HOUR can return values greater than 23.
        </description>
        <examples>
            <example>
                SELECT HOUR('10:05:03');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              LAST_DAY(date)
        </syntax>
        <name>LAST_DAY</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Takes a date or datetime value and returns the corresponding value for the last day of the month.
            Returns NULL if the argument is invalid.
        </description>
        <examples>
            <example>
                SELECT LAST_DAY('2013-11-13');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              MAKEDATE(year,dayofyear)
        </syntax>
        <name>MAKEDATE</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns a date, given year and day-of-year values. dayofyear must be greater than 0 or the result
            is NULL.
        </description>
        <examples>
            <example>
                SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              MAKETIME(hour,minute,second)
        </syntax>
        <name>MAKETIME</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns a time value calculated from the hour, minute, and second arguments.
        </description>
        <examples>
            <example>
                SELECT MAKETIME(12,15,30);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              MICROSECOND(expr)
        </syntax>
        <name>MICROSECOND</name>
        <args>
            <arg optional="false">String</arg>
        </args>
        <description>
            Returns the microseconds from the time or datetime expression expras a number in the range from
            0 to 999999.
        </description>
        <examples>
            <example>
                SELECT MICROSECOND('12:00:00.123456');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              MINUTE(time)
        </syntax>
        <name>MINUTE</name>
        <args>
            <arg optional="false">Time</arg>
        </args>
        <description>
            Returns the minute for time, in the range 0 to 59.
        </description>
        <examples>
            <example>
                SELECT MINUTE('2008-02-03 10:05:03');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              MONTH(date)
        </syntax>
        <name>MONTH</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Returns the month for date, in the range 1to 12for January to December, or 0for dates such as
            '0000-00-00'or '2008-00-00'that have a zero month part.
        </description>
        <examples>
            <example>
                SELECT MONTH('2008-02-03');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              MONTHNAME(date)
        </syntax>
        <name>MONTHNAME</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Returns the full name of the month for date. 
        </description>
        <examples>
            <example>
                SELECT MONTHNAME('2008-02-03');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              PERIOD_ADD(P,N)
        </syntax>
        <name>PERIOD_ADD</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Adds N months to period P(in the format YYMM or YYYYMM). Returns a value in the format YYYYMM.
            Note that the period argument P is nota date value.
        </description>
        <examples>
            <example>
                SELECT PERIOD_ADD(200801,2);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              PERIOD_DIFF(P1,P2)
        </syntax>
        <name>PERIOD_ADD</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the number of months between periods P1and P2. P1and P2should be in the format YYMM
            or YYYYMM. Note that the period arguments P1and P2 are notdate values.
        </description>
        <examples>
            <example>
                SELECT PERIOD_DIFF(200802,200703);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              QUARTER(date)
        </syntax>
        <name>QUARTER</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Returns the quarter of the year for date, in the range 1 to 4.
        </description>
        <examples>
            <example>
                SELECT QUARTER('2013-11-13');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              SECOND(time)
        </syntax>
        <name>SECOND</name>
        <args>
            <arg optional="false">Time</arg>
        </args>
        <description>
            Returns the second for time, in the range 0 to 59.
        </description>
        <examples>
            <example>
                SELECT SECOND('2013-11-13 10:42:58');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              SEC_TO_TIME(seconds)
        </syntax>
        <name>SEC_TO_TIME</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            Returns the secondsargument, converted to hours, minutes, and seconds, as a TIME value. The
            range of the result is constrained to that of the TIMEdata type. A warning occurs if the argument
            corresponds to a value outside that range.
        </description>
        <examples>
            <example>
                SELECT SEC_TO_TIME(50000);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              STR_TO_DATE(str,format)
        </syntax>
        <name>STR_TO_DATE</name>
        <args>
            <arg optional="false">Number</arg>
        </args>
        <description>
            This is the inverse of the DATE_FORMAT() function. It takes a string strand a format string
            format. STR_TO_DATE() returns a DATETIME value if the format string contains both date
            and time parts, or a DATEor TIME value if the string contains only date or time parts. If the date,
            time, or datetime value extracted from stris illegal, STR_TO_DATE() returns NULLand
            produces a warning.
            The server scans strattempting to match formatto it. The format string can contain literal
            characters and format specifiers beginning with %. Literal characters in formatmust match literally
            in str. Format specifiers in formatmust match a date or time part in str. For the specifiers that
            can be used in format, see the DATE_FORMAT() function description.
        </description>
        <examples>
            <example>
                SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              SUBDATE(date,INTERVAL expr unit), 
              SUBDATE(expr,days)
        </syntax>
        <name>SUBDATE</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">Number</arg>
        </args>
        <description>
            When invoked with the INTERVAL form of the second argument, SUBDATE() is a synonym
            for DATE_SUB(). For information on the INTERVAL unitargument, see the discussion for
            DATE_ADD().
        </description>
        <examples>
            <example>
                SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              SUBTIME(expr1,expr2)
        </syntax>
        <name>SUBTIME</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            SUBTIME() returns expr1– expr2 expressed as a value in the same format as expr1.
            expr1 is a time or datetime expression, and expr2 is a time expression.
        </description>
        <examples>
            <example>
                SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              SYSDATE()
        </syntax>
        <name>SYSDATE</name>
        <args>
        </args>
        <description>
            Returns the current date and time as a value in 'YYYY-MM-DD HH:MM:SS'or
            YYYYMMDDHHMMSS.uuuuuu format, depending on whether the function is used in a string or numeric
            context.
        </description>
        <examples>
            <example>
                SELECT NOW(), SLEEP(2), NOW();
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              TIME(expr)
        </syntax>
        <name>TIME</name>
        <args>
            <arg optional="false">String</arg>
        </args>
        <description>
            Extracts the time part of the time or datetime expression exprand returns it as a string.
        </description>
        <examples>
            <example>
                SELECT TIME('2003-12-31 01:02:03');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              TIMEDIFF(expr1,expr2)
        </syntax>
        <name>TIMEDIFF</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            TIMEDIFF() returns expr1– expr2 expressed as a time value. expr1and expr2 are time
            or date-and-time expressions, but both must be of the same type.
            The result returned by TIMEDIFF() is limited to the range allowed for TIME values. Alternatively,
            you can use either of the functions TIMESTAMPDIFF() and UNIX_TIMESTAMP(),
            both of which return integers.
        </description>
        <examples>
            <example>
                SELECT TIMEDIFF('2013:01:01 00:00:00', '2013:01:01 00:00:00.000001');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              TIMESTAMP(expr), 
              TIMESTAMP(expr1,expr2)
        </syntax>
        <name>TIMESTAMP</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="true">String</arg>
        </args>
        <description>
            With a single argument, this function returns the date or datetime expression expras a datetime
            value. With two arguments, it adds the time expression expr2to the date or datetime expression
            expr1 and returns the result as a datetime value.
        </description>
        <examples>
            <example>
                SELECT TIMESTAMP('2003-12-31');
            </example>
            <example>
                SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              TIMESTAMPADD(unit,interval,datetime_expr)
        </syntax>
        <name>TIMESTAMPADD</name>
        <args>
            <arg optional="false">Number</arg>
            <arg optional="false">Number</arg>
            <arg optional="true">String</arg>
        </args>
        <description>
            Adds the integer expression intervalto the date or datetime expression datetime_expr. The
            unit for intervalis given by the unitargument, which should be one of the following values:
            FRAC_SECOND(microseconds), SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.
            Beginning with MySQL 5.1.24, it is possible to use MICROSECOND in place of FRAC_SECONDwith this
            function, and FRAC_SECOND is deprecated. FRAC_SECOND is removed in MySQL 5.5.
            The unitvalue may be specified using one of keywords as shown, or with a prefix of SQL_TSI_.
            For example, DAY and SQL_TSI_DAY both are legal.
        </description>
        <examples>
            <example>
                SELECT TIMESTAMPADD(MINUTE,1,'2003-01-02');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)
        </syntax>
        <name>TIMESTAMPDIFF</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
            <arg optional="true">String</arg>
        </args>
        <description>
            Returns datetime_expr2– datetime_expr1, where datetime_expr1and datetime_expr2
            are date or datetime expressions. One expression may be a date and the other a datetime; a date
            value is treated as a datetime having the time part '00:00:00'where necessary. The unit for the
            result (an integer) is given by the unitargument. The legal values for unitare the same as those
            listed in the description of the TIMESTAMPADD() function.
        </description>
        <examples>
            <example>
                SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              TIME_FORMAT(time,format)
        </syntax>
        <name>TIME_FORMAT</name>
        <args>
            <arg optional="false">Time</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            This is used like the DATE_FORMAT() function, but the formatstring may contain format
            specifiers only for hours, minutes, seconds, and microseconds. Other specifiers produce a NULL
            value or 0.
            If the timevalue contains an hour part that is greater than 23, the %Hand %khour format specifiers
            produce a value larger than the usual range of 0..23. The other hour format specifiers produce the
            hour value modulo 12.
        </description>
        <examples>
            <example>
                SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              TIME_TO_SEC(time)
        </syntax>
        <name>TIME_TO_SEC</name>
        <args>
            <arg optional="false">Time</arg>
        </args>
        <description>
            Returns the timeargument, converted to seconds.
        </description>
        <examples>
            <example>
                SELECT TIME_TO_SEC('22:23:00');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              TO_DAYS(date)
        </syntax>
        <name>TO_DAYS</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Given a date date, returns a day number (the number of days since year 0).
        </description>
        <examples>
            <example>
                SELECT TO_DAYS('2013-11-13');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              UNIX_TIMESTAMP(), 
              UNIX_TIMESTAMP(date)
        </syntax>
        <name>UNIX_TIMESTAMP</name>
        <args>
            <arg optional="true">Date</arg>
        </args>
        <description>
            If called with no argument, returns a Unix timestamp (seconds since '1970-01-01 00:00:00'
            UTC) as an unsigned integer. If UNIX_TIMESTAMP() is called with a dateargument, it
            returns the value of the argument as seconds since '1970-01-01 00:00:00'UTC. datemay be
            a DATE string, a DATETIME string, a TIMESTAMP, or a number in the format YYMMDD or YYYYMMDD.
            The server interprets dateas a value in the current time zone and converts it to an internal value
            in UTC.
        </description>
        <examples>
            <example>
                SELECT UNIX_TIMESTAMP();
            </example>
            <example>
                SELECT UNIX_TIMESTAMP('2007-11-30 10:30:19');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              UTC_DATE, 
              UTC_DATE()
        </syntax>
        <name>UTC_DATE</name>
        <args>
        </args>
        <description>
            Returns the current UTC date as a value in 'YYYY-MM-DD'or YYYYMMDD format, depending on
            whether the function is used in a string or numeric context.
        </description>
        <examples>
            <example>
                SELECT UTC_DATE(), UTC_DATE() + 0;
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              UTC_TIME, 
              UTC_TIME()
        </syntax>
        <name>UTC_DATE</name>
        <args>
        </args>
        <description>
            Returns the current UTC time as a value in 'HH:MM:SS' or HHMMSS.uuuuuu format, depending on
            whether the function is used in a string or numeric context.
        </description>
        <examples>
            <example>
                SELECT UTC_TIME(), UTC_TIME() + 0;
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              UTC_TIMESTAMP, 
              UTC_TIMESTAMP()
        </syntax>
        <name>UTC_TIMESTAMP</name>
        <args>
        </args>
        <description>
            Returns the current UTC date and time as a value in 'YYYY-MM-DD HH:MM:SS'or
            YYYYMMDDHHMMSS.uuuuuu format, depending on whether the function is used in a string or numeric
            context.
        </description>
        <examples>
            <example>
                SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              WEEK(date[,mode])
        </syntax>
        <name>WEEK</name>
        <args>
            <arg optional="false">Date</arg>
            <arg optional="true">String</arg>
        </args>
        <description>
            This function returns the week number for date. The two-argument form of WEEK()
            enables you to specify whether the week starts on Sunday or Monday and whether the return value
            should be in the range from 0to 53or from 1to 53. If the modeargument is omitted, the value of
            the default_week_format system variable is used. 
        </description>
        <examples>
            <example>
                SELECT WEEK('2008-02-20');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              WEEKDAY(date)
        </syntax>
        <name>WEEKDAY</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Returns the weekday index for date(0= Monday, 1= Tuesday, … 6= Sunday).
        </description>
        <examples>
            <example>
                SELECT WEEKDAY('2008-02-20');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              WEEKOFYEAR(date)
        </syntax>
        <name>WEEKOFYEAR</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Returns the calendar week of the date as a number in the range from 1to 53.
            WEEKOFYEAR() is a compatibility function that is equivalent to WEEK(date,3).
        </description>
        <examples>
            <example>
                SELECT WEEKOFYEAR('2008-02-20');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              YEAR(date)
        </syntax>
        <name>YEAR</name>
        <args>
            <arg optional="false">Date</arg>
        </args>
        <description>
            Returns the year for date, in the range 1000to 9999, or 0for the “zero”date.
        </description>
        <examples>
            <example>
                SELECT YEAR('2008-02-20');
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              YEARWEEK(date), 
              YEARWEEK(date,mode)
        </syntax>
        <name>YEARWEEK</name>
        <args>
            <arg optional="false">Date</arg>
            <arg optional="true">String</arg>
        </args>
        <description>
            Returns year and week for a date. The modeargument works exactly like the modeargument to
            WEEK(). The year in the result may be different from the year in the date argument for the
            first and the last week of the year.
        </description>
        <examples>
            <example>
                SELECT YEARWEEK('2008-02-20');
            </example>
        </examples>
    </function>
<!--    Full-Text Search Functions-->
    <function>
        <syntax>
              MATCH (col1,col2,...) AGAINST (expr[search_modifier])
        </syntax>
        <name>YEARWEEK</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="false">String</arg>
        </args>
        <description>
            search_modifier:
            {
                IN NATURAL LANGUAGE MODE
                | IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION
                | IN BOOLEAN MODE
                | WITH QUERY EXPANSION
             }
             MySQL has support for full-text indexing and searching:
                • A full-text index in MySQL is an index of type FULLTEXT.
                • Full-text indexes can be used only with MyISAMtables. (In MySQL 5.6 and up, they can also be used
            with InnoDBtables.) Full-text indexes can be created only for CHAR, VARCHAR, or TEXT columns.
                • A FULLTEXTindex definition can be given in the CREATE TABLEstatement when a table is created,
            or added later using ALTER TABLEor CREATE INDEX.
                • For large data sets, it is much faster to load your data into a table that has no FULLTEXTindex and
            then create the index after that, than to load data into a table that has an existing FULLTEXTindex.
            Full-text searching is performed using MATCH() ... AGAINST syntax. MATCH() takes
            a comma-separated list that names the columns to be searched. AGAINSTtakes a string to search
            for, and an optional modifier that indicates what type of search to perform. The search string must
            be a string value that is constant during query evaluation. This rules out, for example, a table column
            because that can differ for each row.
        </description>
        <examples>
            <example>
                CREATE TABLE articles (
                    id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
                    title VARCHAR(200),
                    body TEXT,
                    FULLTEXT (title,body)
                ) ENGINE=MyISAM;
                
                INSERT INTO articles (title,body) VALUES
                 ('MySQL Tutorial','DBMS stands for DataBase ...'),
                 ('How To Use MySQL Well','After you went through a ...'),
                 ('Optimizing MySQL','In this tutorial we will show ...'),
                 ('1001 MySQL Tricks','1. Never run mysqld as root. 2. ...'),
                 ('MySQL vs. YourSQL','In the following database comparison ...'),
                 ('MySQL Security','When configured properly, MySQL ...');
                 
                 SELECT
                        *
                 FROM
                        articles
                 WHERE
                        MATCH (title, body) AGAINST (
                                '1001' IN NATURAL LANGUAGE MODE
                        );
            </example>
        </examples>
    </function>
<!--    Cast Functions and Operators-->
    <function>
        <syntax>
              BINARY
        </syntax>
        <name>BINARY</name>
        <args>
        </args>
        <description>
            The BINARY operator casts the string following it to a binary string. This is an easy way
            to force a column comparison to be done byte by byte rather than character by character. This
            causes the comparison to be case sensitive even if the column is not defined as BINARY or BLOB.
            BINARY also causes trailing spaces to be significant.
        </description>
        <examples>
            <example>
                SELECT 'l' = 'l';
                SELECT BINARY 'l' = 'l';
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              CAST(exprAS type)
        </syntax>
        <name>CAST</name>
        <args>
            <arg optional="false">String</arg>
        </args>
        <description>
            The CAST() function takes an expression of any type and produces a result value of a
            specified type, similar to CONVERT(). See the description of CONVERT() for more
            information.
        </description>
        <examples>
            <example>
                SELECT CAST(2 AS UNSIGNED);
            </example>
        </examples>
    </function>
    <function>
        <syntax>
              CONVERT(expr,type), 
              CONVERT(expr USING transcoding_name)
        </syntax>
        <name>CAST</name>
        <args>
            <arg optional="false">String</arg>
            <arg optional="true">String</arg>
        </args>
        <description>
            The CONVERT()[1056]and CAST()[1056]functions take an expression of any type and produce a
            result value of a specified type.
            The typefor the result can be one of the following values:
            • BINARY[(N)]
            • CHAR[(N)]
            • DATE
            • DATETIME
            • DECIMAL[(M[,D])]
            • SIGNED [INTEGER]
            • TIME
            • UNSIGNED [INTEGER]
        </description>
        <examples>
            <example>
                SELECT CONVERT(2, UNSIGNED)
            </example>
        </examples>
    </function>
</functions>
